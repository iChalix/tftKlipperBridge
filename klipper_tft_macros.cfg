# Klipper Macros for TFT Bridge Compatibility
# Add these macros to your printer.cfg file

# LOAD_FILAMENT and UNLOAD_FILAMENT macros
# These will only be defined if they don't already exist
# If you have your own macros, the M701/M702 commands below will use them

{% if printer.configfile.settings['gcode_macro LOAD_FILAMENT'] is not defined %}
[gcode_macro LOAD_FILAMENT]
description: Load filament for TFT compatibility (fallback macro)
gcode:
    {% set speed = params.SPEED|default(300)|int %}
    {% set load_distance = params.LENGTH|default(50)|int %}
    
    SAVE_GCODE_STATE NAME=load_state
    G91                    # Relative positioning
    G92 E0                 # Reset extruder
    G1 E{load_distance} F{speed * 60}  # Load filament
    RESTORE_GCODE_STATE NAME=load_state
    RESPOND MSG="Filament load complete (using fallback macro)"
{% endif %}

{% if printer.configfile.settings['gcode_macro UNLOAD_FILAMENT'] is not defined %}
[gcode_macro UNLOAD_FILAMENT]
description: Unload filament for TFT compatibility (fallback macro)
gcode:
    {% set speed = params.SPEED|default(300)|int %}
    {% set unload_distance = params.LENGTH|default(50)|int %}
    
    SAVE_GCODE_STATE NAME=unload_state
    G91                     # Relative positioning
    G92 E0                  # Reset extruder
    G1 E-{unload_distance} F{speed * 60}  # Unload filament
    RESTORE_GCODE_STATE NAME=unload_state
    RESPOND MSG="Filament unload complete (using fallback macro)"
{% endif %}

[gcode_macro M420]
description: Enable/disable bed leveling (TFT compatibility)
gcode:
    {% if params.S is defined %}
        {% if params.S|int == 1 %}
            BED_MESH_PROFILE LOAD=default
            RESPOND MSG="Bed leveling enabled"
        {% else %}
            BED_MESH_CLEAR
            RESPOND MSG="Bed leveling disabled"
        {% endif %}
    {% else %}
        RESPOND MSG="Usage: M420 S1 (enable) or M420 S0 (disable)"
    {% endif %}

[gcode_macro M421]
description: Set bed mesh value (TFT compatibility)
gcode:
    {% if params.I is defined and params.J is defined and params.Z is defined %}
        # Note: This is a simplified implementation
        # Klipper doesn't support direct mesh point modification like Marlin
        RESPOND MSG="M421 I{params.I} J{params.J} Z{params.Z} - Use BED_MESH_CALIBRATE instead"
    {% else %}
        RESPOND MSG="Usage: M421 I<index_x> J<index_y> Z<offset>"
    {% endif %}

# Fallback filament macros with different names to avoid conflicts
[gcode_macro TFT_LOAD_FILAMENT]
description: TFT fallback load filament macro
gcode:
    {% set speed = params.SPEED|default(300)|int %}
    {% set load_distance = params.LENGTH|default(50)|int %}
    
    SAVE_GCODE_STATE NAME=tft_load_state
    G91                    # Relative positioning
    G92 E0                 # Reset extruder
    G1 E{load_distance} F{speed * 60}  # Load filament
    RESTORE_GCODE_STATE NAME=tft_load_state
    RESPOND MSG="Filament loaded (TFT fallback macro)"

[gcode_macro TFT_UNLOAD_FILAMENT]
description: TFT fallback unload filament macro
gcode:
    {% set speed = params.SPEED|default(300)|int %}
    {% set unload_distance = params.LENGTH|default(50)|int %}
    
    SAVE_GCODE_STATE NAME=tft_unload_state
    G91                     # Relative positioning
    G92 E0                  # Reset extruder
    G1 E-{unload_distance} F{speed * 60}  # Unload filament
    RESTORE_GCODE_STATE NAME=tft_unload_state
    RESPOND MSG="Filament unloaded (TFT fallback macro)"

[gcode_macro M701]
description: Load filament (uses existing macro if available)
gcode:
    {% if printer['gcode_macro LOAD_FILAMENT'] is defined %}
        LOAD_FILAMENT {rawparams}
    {% else %}
        TFT_LOAD_FILAMENT {rawparams}
    {% endif %}

[gcode_macro M702]  
description: Unload filament (uses existing macro if available)
gcode:
    {% if printer['gcode_macro UNLOAD_FILAMENT'] is defined %}
        UNLOAD_FILAMENT {rawparams}
    {% else %}
        TFT_UNLOAD_FILAMENT {rawparams}
    {% endif %}

[gcode_macro M851]
description: Set Z probe offset (TFT compatibility)
gcode:
    {% if params.Z is defined %}
        SET_GCODE_OFFSET Z={params.Z} MOVE=1
        RESPOND MSG="Z offset set to {params.Z}"
    {% else %}
        {% set offset = printer.gcode_move.homing_origin.z %}
        RESPOND MSG="Z offset: {offset}"
    {% endif %}

[gcode_macro M500]
description: Save configuration (TFT compatibility)
gcode:
    RESPOND MSG="Use SAVE_CONFIG to save settings to printer.cfg"
    # Uncomment the next line if you want auto-save (will restart Klipper)
    # SAVE_CONFIG

[gcode_macro M503]
description: Report settings (TFT compatibility)
gcode:
    RESPOND MSG="Settings are stored in printer.cfg file"
    {% set offset_z = printer.gcode_move.homing_origin.z %}
    RESPOND MSG="Z Offset: {offset_z}"
    {% if printer.bed_mesh %}
        {% if printer.bed_mesh.profile_name %}
            RESPOND MSG="Active bed mesh: {printer.bed_mesh.profile_name}"
        {% else %}
            RESPOND MSG="No bed mesh loaded"
        {% endif %}
    {% endif %}

[gcode_macro M280]
description: Servo control (BLTouch compatibility)
gcode:
    {% if params.P is defined and params.S is defined %}
        {% set servo = params.P|int %}
        {% set angle = params.S|int %}
        
        {% if servo == 0 %}  # BLTouch servo
            {% if angle == 10 %}
                BLTOUCH_DEBUG COMMAND=pin_down
                RESPOND MSG="BLTouch pin down"
            {% elif angle == 90 %}
                BLTOUCH_DEBUG COMMAND=pin_up  
                RESPOND MSG="BLTouch pin up"
            {% elif angle == 160 %}
                BLTOUCH_DEBUG COMMAND=reset
                RESPOND MSG="BLTouch reset"
            {% elif angle == 120 %}
                BLTOUCH_DEBUG COMMAND=self_test
                RESPOND MSG="BLTouch self test"
            {% else %}
                RESPOND MSG="Unknown BLTouch command: S{angle}"
            {% endif %}
        {% else %}
            RESPOND MSG="Servo {servo} not supported"
        {% endif %}
    {% else %}
        RESPOND MSG="Usage: M280 P<servo> S<angle>"
    {% endif %}

[gcode_macro M401]
description: Deploy probe (TFT compatibility)
gcode:
    BLTOUCH_DEBUG COMMAND=pin_down
    RESPOND MSG="Probe deployed"

[gcode_macro M402]
description: Stow probe (TFT compatibility)  
gcode:
    BLTOUCH_DEBUG COMMAND=pin_up
    RESPOND MSG="Probe stowed"

[gcode_macro M48]
description: Probe repeatability test (TFT compatibility)
gcode:
    {% set probe_count = params.P|default(10)|int %}
    PROBE_ACCURACY SAMPLES={probe_count}

[gcode_macro M303]
description: PID autotune (TFT compatibility)
gcode:
    {% if params.E is defined %}
        {% set heater_index = params.E|int %}
        {% set cycles = params.C|default(8)|int %}
        
        {% if heater_index == 0 %}
            PID_CALIBRATE HEATER=extruder TARGET=200
        {% elif heater_index == 1 %}
            PID_CALIBRATE HEATER=extruder1 TARGET=200  
        {% elif heater_index == -1 %}
            PID_CALIBRATE HEATER=heater_bed TARGET=60
        {% else %}
            RESPOND MSG="Unknown heater index: E{heater_index}"
        {% endif %}
    {% else %}
        RESPOND MSG="Usage: M303 E<heater> C<cycles> - E0=hotend, E-1=bed"
    {% endif %}

[gcode_macro M306]
description: MPC autotune (TFT compatibility)
gcode:
    {% if params.T is defined %}
        {% set tool = params.T|int %}
        RESPOND MSG="MPC tuning not implemented for tool {tool}"
    {% else %}
        RESPOND MSG="Usage: M306 T<tool>"
    {% endif %}

# Print control macros that work better with TFT
[gcode_macro M24]
description: Start/resume print (enhanced TFT compatibility)
rename_existing: M24.1
gcode:
    {% if printer.pause_resume.is_paused %}
        RESUME
    {% else %}
        M24.1  # Call original M24
    {% endif %}

[gcode_macro M25]  
description: Pause print (enhanced TFT compatibility)
rename_existing: M25.1
gcode:
    PAUSE

[gcode_macro M125]
description: Park head and pause
gcode:
    PAUSE

# Temperature reporting that works better with TFT
[gcode_macro M155]
description: Set temperature auto-report interval
gcode:
    # TFT bridge handles this automatically
    RESPOND MSG="Temperature auto-reporting handled by bridge"

[gcode_macro M154]
description: Set position auto-report interval  
gcode:
    # TFT bridge handles this automatically
    RESPOND MSG="Position auto-reporting handled by bridge"

# Utility macros for better TFT integration
[gcode_macro TFT_PREHEAT_PLA]
description: Preheat for PLA
gcode:
    M104 S200      # Set hotend to 200C
    M140 S60       # Set bed to 60C
    RESPOND MSG="Preheating for PLA..."

[gcode_macro TFT_PREHEAT_PETG]
description: Preheat for PETG
gcode:
    M104 S240      # Set hotend to 240C  
    M140 S80       # Set bed to 80C
    RESPOND MSG="Preheating for PETG..."

[gcode_macro TFT_PREHEAT_ABS]
description: Preheat for ABS
gcode:
    M104 S250      # Set hotend to 250C
    M140 S100      # Set bed to 100C
    RESPOND MSG="Preheating for ABS..."

[gcode_macro TFT_COOLDOWN]
description: Turn off all heaters
gcode:
    M104 S0        # Turn off hotend
    M140 S0        # Turn off bed
    M106 S0        # Turn off part cooling fan
    RESPOND MSG="Cooling down..."