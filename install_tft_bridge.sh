#!/bin/bash

# TFT-Moonraker Bridge Enhanced Installation Script
# This script provides an interactive setup with configuration templates

set -e  # Exit on any error

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_FILE="$SCRIPT_DIR/tft_bridge_config.sh"
CONFIG_TEMPLATE="$SCRIPT_DIR/tft_bridge_config.template"

# Default configuration (fallback values)
TFT_SERIAL_PORT="/dev/ttyUSB0"
TFT_BAUD_RATE="250000"
MOONRAKER_HOST="localhost"
MOONRAKER_PORT="7125"
BRIDGE_LOG_LEVEL="INFO"
BRIDGE_TIMEOUT="5.0"
BRIDGE_USER="pi"
BRIDGE_INSTALL_DIR="/home/${BRIDGE_USER}"
SERVICE_NAME="tft-bridge"
AUTO_START="yes"
KLIPPER_CONFIG_DIR="/home/${BRIDGE_USER}/printer_data/config"
KLIPPER_CONFIG_FILE="printer.cfg"

# Functions
print_header() {
    clear
    echo -e "${CYAN}"
    echo "=============================================="
    echo "   TFT-Moonraker Bridge Installation Wizard"
    echo "=============================================="
    echo -e "${NC}"
    echo "This script will help you install and configure"
    echo "the TFT-Moonraker bridge for your TFT35 V2."
    echo ""
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

print_error() {
    echo -e "${RED}✗ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ $1${NC}"
}

print_step() {
    echo -e "${CYAN}▶ $1${NC}"
}

pause_for_user() {
    echo ""
    read -p "Press Enter to continue..." -r
    echo ""
}

load_configuration() {
    if [[ -f "$CONFIG_FILE" ]]; then
        print_info "Loading configuration from $CONFIG_FILE"
        source "$CONFIG_FILE"
        return 0
    else
        return 1
    fi
}

create_config_from_template() {
    print_step "Creating configuration file..."
    
    if [[ -f "$CONFIG_TEMPLATE" ]]; then
        cp "$CONFIG_TEMPLATE" "$CONFIG_FILE"
        # Remove the template header and make it executable
        sed -i '1,3d' "$CONFIG_FILE"
        chmod +x "$CONFIG_FILE"
        print_success "Configuration template copied to $CONFIG_FILE"
        return 0
    else
        print_warning "Template file not found, using interactive configuration"
        return 1
    fi
}

interactive_configuration() {
    print_step "Interactive Configuration"
    echo "Please provide the following information:"
    echo ""
    
    # TFT Serial Port
    echo -e "${YELLOW}TFT Serial Configuration:${NC}"
    echo "Available serial ports:"
    ls /dev/tty* 2>/dev/null | grep -E "(USB|ACM|serial)" | head -10 || echo "  No common serial ports found"
    echo ""
    read -p "TFT Serial Port [$TFT_SERIAL_PORT]: " input
    TFT_SERIAL_PORT="${input:-$TFT_SERIAL_PORT}"
    
    read -p "TFT Baud Rate [$TFT_BAUD_RATE]: " input
    TFT_BAUD_RATE="${input:-$TFT_BAUD_RATE}"
    
    echo ""
    
    # Moonraker Configuration
    echo -e "${YELLOW}Moonraker Configuration:${NC}"
    read -p "Moonraker Host [$MOONRAKER_HOST]: " input
    MOONRAKER_HOST="${input:-$MOONRAKER_HOST}"
    
    read -p "Moonraker Port [$MOONRAKER_PORT]: " input
    MOONRAKER_PORT="${input:-$MOONRAKER_PORT}"
    
    echo ""
    
    # Advanced options
    echo -e "${YELLOW}Advanced Options:${NC}"
    echo "Log levels: DEBUG (verbose), INFO (normal), WARNING (errors only)"
    read -p "Log Level [$BRIDGE_LOG_LEVEL]: " input
    BRIDGE_LOG_LEVEL="${input:-$BRIDGE_LOG_LEVEL}"
    
    read -p "Service User [$BRIDGE_USER]: " input
    BRIDGE_USER="${input:-$BRIDGE_USER}"
    BRIDGE_INSTALL_DIR="/home/${BRIDGE_USER}"
    KLIPPER_CONFIG_DIR="/home/${BRIDGE_USER}/printer_data/config"
    
    echo ""
    echo -e "${YELLOW}Auto-start Service:${NC}"
    read -p "Start bridge automatically on boot? (y/n) [y]: " input
    if [[ "$input" =~ ^[Nn]$ ]]; then
        AUTO_START="no"
    else
        AUTO_START="yes"
    fi
}

save_configuration() {
    print_step "Saving configuration..."
    
    cat > "$CONFIG_FILE" << EOF
#!/bin/bash
# TFT Bridge Configuration
# Generated by install script on $(date)

# TFT Configuration
TFT_SERIAL_PORT="$TFT_SERIAL_PORT"
TFT_BAUD_RATE="$TFT_BAUD_RATE"

# Moonraker Configuration
MOONRAKER_HOST="$MOONRAKER_HOST"
MOONRAKER_PORT="$MOONRAKER_PORT"

# Bridge Configuration
BRIDGE_LOG_LEVEL="$BRIDGE_LOG_LEVEL"
BRIDGE_TIMEOUT="$BRIDGE_TIMEOUT"
BRIDGE_USER="$BRIDGE_USER"
BRIDGE_INSTALL_DIR="$BRIDGE_INSTALL_DIR"

# Service Configuration
SERVICE_NAME="$SERVICE_NAME"
AUTO_START="$AUTO_START"

# Klipper Configuration
KLIPPER_CONFIG_DIR="$KLIPPER_CONFIG_DIR"
KLIPPER_CONFIG_FILE="$KLIPPER_CONFIG_FILE"
EOF

    chmod +x "$CONFIG_FILE"
    print_success "Configuration saved to $CONFIG_FILE"
}

display_configuration_summary() {
    print_step "Configuration Summary"
    echo "┌─────────────────────────────────────────────┐"
    echo "│                Configuration                │"
    echo "├─────────────────────────────────────────────┤"
    printf "│ %-20s │ %-20s │\n" "TFT Serial Port" "$TFT_SERIAL_PORT"
    printf "│ %-20s │ %-20s │\n" "TFT Baud Rate" "$TFT_BAUD_RATE"
    printf "│ %-20s │ %-20s │\n" "Moonraker Host" "$MOONRAKER_HOST"
    printf "│ %-20s │ %-20s │\n" "Moonraker Port" "$MOONRAKER_PORT"
    printf "│ %-20s │ %-20s │\n" "Log Level" "$BRIDGE_LOG_LEVEL"
    printf "│ %-20s │ %-20s │\n" "Service User" "$BRIDGE_USER"
    printf "│ %-20s │ %-20s │\n" "Auto Start" "$AUTO_START"
    printf "│ %-20s │ %-20s │\n" "Install Dir" "${BRIDGE_INSTALL_DIR:0:20}..."
    echo "└─────────────────────────────────────────────┘"
    echo ""
    
    read -p "Proceed with this configuration? (y/n) [y]: " -r
    if [[ "$REPLY" =~ ^[Nn]$ ]]; then
        print_info "Configuration cancelled. Run the script again to reconfigure."
        exit 0
    fi
}

check_prerequisites() {
    print_step "Checking prerequisites..."
    local errors=0
    
    # Check if running as root
    if [[ $EUID -eq 0 ]]; then
        print_error "This script should not be run as root!"
        ((errors++))
    fi
    
    # Check Python 3
    if ! command -v python3 &> /dev/null; then
        print_error "Python 3 is not installed!"
        ((errors++))
    else
        print_success "Python 3 found ($(python3 --version))"
    fi
    
    # Check pip
    if ! command -v pip3 &> /dev/null; then
        print_error "pip3 is not installed!"
        ((errors++))
    else
        print_success "pip3 found"
    fi
    
    # Check required files
    local required_files=("tft_moonraker_bridge.py" "klipper_tft_macros.cfg")
    for file in "${required_files[@]}"; do
        if [[ ! -f "$SCRIPT_DIR/$file" ]]; then
            print_error "Required file not found: $file"
            ((errors++))
        else
            print_success "Found $file"
        fi
    done
    
    # Check serial port (warning only)
    if [[ ! -e "$TFT_SERIAL_PORT" ]]; then
        print_warning "Serial port $TFT_SERIAL_PORT does not exist yet"
        print_info "This is normal if TFT is not connected. Please connect before starting the service."
    else
        print_success "Serial port $TFT_SERIAL_PORT found"
    fi
    
    # Check user exists
    if ! id "$BRIDGE_USER" &>/dev/null; then
        print_error "User $BRIDGE_USER does not exist!"
        ((errors++))
    else
        print_success "User $BRIDGE_USER found"
    fi
    
    # Check dialout group
    if ! groups "$BRIDGE_USER" 2>/dev/null | grep -q dialout; then
        print_warning "User $BRIDGE_USER is not in 'dialout' group"
        print_info "Adding user to dialout group..."
        sudo usermod -a -G dialout "$BRIDGE_USER"
        print_success "User added to dialout group"
        print_warning "You may need to log out and back in for group changes to take effect"
    else
        print_success "User is in dialout group"
    fi
    
    if [[ $errors -gt 0 ]]; then
        print_error "Prerequisites check failed with $errors error(s)"
        exit 1
    fi
    
    print_success "All prerequisites satisfied"
}

install_dependencies() {
    print_step "Installing Python dependencies..."
    
    # Method 1: Try system packages first (recommended for production)
    print_info "Attempting system package installation..."
    if command -v apt-get >/dev/null 2>&1; then
        print_info "Detected apt package manager"
        if apt-get update >/dev/null 2>&1 && apt-get install -y python3-serial python3-aiohttp python3-websockets python3-requests >/dev/null 2>&1; then
            print_success "Dependencies installed via system packages"
            return 0
        fi
    elif command -v dnf >/dev/null 2>&1; then
        print_info "Detected dnf package manager"
        if dnf install -y python3-pyserial python3-aiohttp python3-websockets python3-requests >/dev/null 2>&1; then
            print_success "Dependencies installed via system packages"
            return 0
        fi
    elif command -v pacman >/dev/null 2>&1; then
        print_info "Detected pacman package manager"
        if pacman -S --noconfirm python-pyserial python-aiohttp python-websockets python-requests >/dev/null 2>&1; then
            print_success "Dependencies installed via system packages"
            return 0
        fi
    fi
    
    # Method 2: Try virtual environment for the user
    print_info "Trying virtual environment approach..."
    local venv_dir="/home/$BRIDGE_USER/.tft-bridge-venv"
    if sudo -u "$BRIDGE_USER" python3 -m venv "$venv_dir" 2>/dev/null; then
        if sudo -u "$BRIDGE_USER" bash -c "source '$venv_dir/bin/activate' && pip install -r requirements.txt" 2>/dev/null; then
            print_success "Dependencies installed in virtual environment"
            print_info "Virtual environment created at $venv_dir"
            
            # Update the systemd service to use the virtual environment
            export PYTHON_VENV="$venv_dir"
            return 0
        fi
    fi
    
    # Method 3: Try --break-system-packages flag
    print_info "Trying --break-system-packages flag..."
    if [[ -f "requirements.txt" ]]; then
        if sudo -u "$BRIDGE_USER" pip3 install --user --break-system-packages -r requirements.txt 2>/dev/null; then
            print_success "Dependencies installed with --break-system-packages"
            return 0
        fi
    fi
    
    # Method 4: Traditional user install (fallback)
    print_info "Trying traditional user install..."
    if [[ -f "requirements.txt" ]]; then
        if sudo -u "$BRIDGE_USER" pip3 install --user -r requirements.txt 2>/dev/null; then
            print_success "Dependencies installed successfully"
            return 0
        else
            print_warning "Failed to install from requirements.txt, trying individual packages..."
            if sudo -u "$BRIDGE_USER" pip3 install --user pyserial websockets requests aiohttp 2>/dev/null; then
                print_success "Dependencies installed successfully"
                return 0
            fi
        fi
    else
        if sudo -u "$BRIDGE_USER" pip3 install --user pyserial websockets requests aiohttp 2>/dev/null; then
            print_success "Dependencies installed successfully"
            return 0
        fi
    fi
    
    # All methods failed
    print_error "Failed to install Python dependencies automatically"
    echo ""
    print_info "This is likely due to externally-managed-environment restrictions."
    echo ""
    echo "Please manually install dependencies using one of these methods:"
    echo ""
    echo "1. System packages (recommended):"
    if command -v apt-get >/dev/null 2>&1; then
        echo "   sudo apt update"
        echo "   sudo apt install python3-serial python3-aiohttp python3-websockets python3-requests"
    elif command -v dnf >/dev/null 2>&1; then
        echo "   sudo dnf install python3-pyserial python3-aiohttp python3-websockets python3-requests"
    elif command -v pacman >/dev/null 2>&1; then
        echo "   sudo pacman -S python-pyserial python-aiohttp python-websockets python-requests"
    else
        echo "   (Use your distribution's package manager)"
    fi
    echo ""
    echo "2. Virtual environment:"
    echo "   sudo -u $BRIDGE_USER python3 -m venv /home/$BRIDGE_USER/.tft-bridge-venv"
    echo "   sudo -u $BRIDGE_USER bash -c 'source /home/$BRIDGE_USER/.tft-bridge-venv/bin/activate && pip install -r requirements.txt'"
    echo ""
    echo "3. Override restrictions (not recommended):"
    echo "   sudo -u $BRIDGE_USER pip3 install --user --break-system-packages -r requirements.txt"
    echo ""
    
    read -p "Would you like to continue installation anyway? (y/n): " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
    
    print_success "Python dependencies installed"
}

install_bridge_files() {
    print_step "Installing bridge files..."
    
    # Create installation directory if it doesn't exist
    sudo -u "$BRIDGE_USER" mkdir -p "$BRIDGE_INSTALL_DIR"
    
    # Copy bridge script
    sudo cp "$SCRIPT_DIR/tft_moonraker_bridge.py" "$BRIDGE_INSTALL_DIR/"
    sudo chown "$BRIDGE_USER:$BRIDGE_USER" "$BRIDGE_INSTALL_DIR/tft_moonraker_bridge.py"
    sudo chmod +x "$BRIDGE_INSTALL_DIR/tft_moonraker_bridge.py"
    print_success "Bridge script installed"
    
    # Copy configuration
    sudo cp "$CONFIG_FILE" "$BRIDGE_INSTALL_DIR/"
    sudo chown "$BRIDGE_USER:$BRIDGE_USER" "$BRIDGE_INSTALL_DIR/tft_bridge_config.sh"
    print_success "Configuration file installed"
    
    # Install Klipper macros
    if [[ -d "$KLIPPER_CONFIG_DIR" ]]; then
        sudo cp "$SCRIPT_DIR/klipper_tft_macros.cfg" "$KLIPPER_CONFIG_DIR/"
        sudo chown "$BRIDGE_USER:$BRIDGE_USER" "$KLIPPER_CONFIG_DIR/klipper_tft_macros.cfg"
        print_success "Klipper macros installed"
        
        # Add include to printer.cfg if needed
        if [[ -f "$KLIPPER_CONFIG_DIR/$KLIPPER_CONFIG_FILE" ]]; then
            if ! sudo grep -q "klipper_tft_macros.cfg" "$KLIPPER_CONFIG_DIR/$KLIPPER_CONFIG_FILE" 2>/dev/null; then
                print_info "Adding macro include to $KLIPPER_CONFIG_FILE..."
                echo "" | sudo tee -a "$KLIPPER_CONFIG_DIR/$KLIPPER_CONFIG_FILE" > /dev/null
                echo "# TFT Bridge Macros" | sudo tee -a "$KLIPPER_CONFIG_DIR/$KLIPPER_CONFIG_FILE" > /dev/null
                echo "[include klipper_tft_macros.cfg]" | sudo tee -a "$KLIPPER_CONFIG_DIR/$KLIPPER_CONFIG_FILE" > /dev/null
                print_success "Include statement added to $KLIPPER_CONFIG_FILE"
            else
                print_success "Macros already included in $KLIPPER_CONFIG_FILE"
            fi
        else
            print_warning "$KLIPPER_CONFIG_FILE not found"
        fi
    else
        print_warning "Klipper config directory not found at $KLIPPER_CONFIG_DIR"
        print_info "Please manually copy klipper_tft_macros.cfg to your Klipper config directory"
    fi
}

create_systemd_service() {
    print_step "Creating systemd service..."
    
    sudo tee /etc/systemd/system/${SERVICE_NAME}.service > /dev/null << EOF
[Unit]
Description=TFT Moonraker Bridge
Documentation=https://github.com/bigtreetech/BIGTREETECH-TouchScreenFirmware
After=network.target klipper.service moonraker.service
Wants=klipper.service moonraker.service

[Service]
Type=simple
User=${BRIDGE_USER}
Group=${BRIDGE_USER}
WorkingDirectory=${BRIDGE_INSTALL_DIR}
ExecStart=/usr/bin/python3 ${BRIDGE_INSTALL_DIR}/tft_moonraker_bridge.py \\
    --serial-port ${TFT_SERIAL_PORT} \\
    --baud-rate ${TFT_BAUD_RATE} \\
    --moonraker-host ${MOONRAKER_HOST} \\
    --moonraker-port ${MOONRAKER_PORT} \\
    --log-level ${BRIDGE_LOG_LEVEL} \\
    --timeout ${BRIDGE_TIMEOUT}

Restart=always
RestartSec=5
StandardOutput=journal
StandardError=journal
KillMode=mixed
TimeoutStopSec=5

[Install]
WantedBy=multi-user.target
EOF

    print_success "Systemd service created"
    
    sudo systemctl daemon-reload
    print_success "Systemd daemon reloaded"
    
    if [[ "$AUTO_START" == "yes" ]]; then
        sudo systemctl enable ${SERVICE_NAME}.service
        print_success "Service enabled for auto-start"
    fi
}

create_helper_scripts() {
    print_step "Creating helper scripts..."
    
    # Create start script
    sudo tee "$BRIDGE_INSTALL_DIR/start_bridge.sh" > /dev/null << EOF
#!/bin/bash
# TFT Bridge Manual Start Script

cd "$BRIDGE_INSTALL_DIR"
source tft_bridge_config.sh

python3 tft_moonraker_bridge.py \\
    --serial-port \$TFT_SERIAL_PORT \\
    --baud-rate \$TFT_BAUD_RATE \\
    --moonraker-host \$MOONRAKER_HOST \\
    --moonraker-port \$MOONRAKER_PORT \\
    --log-level \$BRIDGE_LOG_LEVEL \\
    --timeout \$BRIDGE_TIMEOUT
EOF
    
    # Create status script
    sudo tee "$BRIDGE_INSTALL_DIR/bridge_status.sh" > /dev/null << EOF
#!/bin/bash
# TFT Bridge Status Script

echo "=== TFT Bridge Status ==="
echo ""
echo "Service Status:"
systemctl is-active ${SERVICE_NAME} >/dev/null 2>&1 && echo "✓ Service is running" || echo "✗ Service is stopped"
echo ""
echo "Configuration:"
source "$BRIDGE_INSTALL_DIR/tft_bridge_config.sh"
echo "  Serial Port: \$TFT_SERIAL_PORT"
echo "  Baud Rate: \$TFT_BAUD_RATE"
echo "  Moonraker: \$MOONRAKER_HOST:\$MOONRAKER_PORT"
echo ""
echo "Recent Logs:"
journalctl -u ${SERVICE_NAME} --no-pager -n 10
EOF

    # Create control script
    sudo tee "$BRIDGE_INSTALL_DIR/bridge_control.sh" > /dev/null << EOF
#!/bin/bash
# TFT Bridge Control Script

case "\$1" in
    start)
        echo "Starting TFT Bridge..."
        sudo systemctl start ${SERVICE_NAME}
        ;;
    stop)
        echo "Stopping TFT Bridge..."
        sudo systemctl stop ${SERVICE_NAME}
        ;;
    restart)
        echo "Restarting TFT Bridge..."
        sudo systemctl restart ${SERVICE_NAME}
        ;;
    status)
        sudo systemctl status ${SERVICE_NAME}
        ;;
    logs)
        sudo journalctl -u ${SERVICE_NAME} -f
        ;;
    enable)
        echo "Enabling auto-start..."
        sudo systemctl enable ${SERVICE_NAME}
        ;;
    disable)
        echo "Disabling auto-start..."
        sudo systemctl disable ${SERVICE_NAME}
        ;;
    *)
        echo "Usage: \$0 {start|stop|restart|status|logs|enable|disable}"
        exit 1
        ;;
esac
EOF

    # Set permissions
    sudo chown "$BRIDGE_USER:$BRIDGE_USER" "$BRIDGE_INSTALL_DIR"/*.sh
    sudo chmod +x "$BRIDGE_INSTALL_DIR"/*.sh
    
    print_success "Helper scripts created"
}

test_installation() {
    print_step "Testing installation..."
    
    # Test Moonraker connection
    if curl -s "http://${MOONRAKER_HOST}:${MOONRAKER_PORT}/printer/info" &>/dev/null; then
        print_success "Moonraker API is accessible"
    else
        print_warning "Moonraker API is not accessible at http://${MOONRAKER_HOST}:${MOONRAKER_PORT}"
    fi
    
    # Check if files are executable
    if [[ -x "$BRIDGE_INSTALL_DIR/tft_moonraker_bridge.py" ]]; then
        print_success "Bridge script is executable"
    else
        print_error "Bridge script is not executable"
    fi
    
    # Check service file
    if systemctl cat ${SERVICE_NAME} &>/dev/null; then
        print_success "Systemd service is properly configured"
    else
        print_error "Systemd service configuration failed"
    fi
}

print_final_instructions() {
    print_success "Installation completed successfully!"
    echo ""
    echo -e "${CYAN}══════════════════════════════════════════${NC}"
    echo -e "${CYAN}              NEXT STEPS                   ${NC}"
    echo -e "${CYAN}══════════════════════════════════════════${NC}"
    echo ""
    echo "1. Restart Klipper to load the new macros:"
    echo "   ${YELLOW}sudo systemctl restart klipper${NC}"
    echo ""
    echo "2. Connect your TFT to $TFT_SERIAL_PORT"
    echo ""
    echo "3. Start the bridge service:"
    echo "   ${YELLOW}sudo systemctl start ${SERVICE_NAME}${NC}"
    echo ""
    echo "4. Check service status:"
    echo "   ${YELLOW}sudo systemctl status ${SERVICE_NAME}${NC}"
    echo ""
    echo "5. View live logs:"
    echo "   ${YELLOW}sudo journalctl -u ${SERVICE_NAME} -f${NC}"
    echo ""
    echo -e "${CYAN}══════════════════════════════════════════${NC}"
    echo -e "${CYAN}              USEFUL COMMANDS              ${NC}"
    echo -e "${CYAN}══════════════════════════════════════════${NC}"
    echo ""
    echo "Manual start (for testing):"
    echo "  ${YELLOW}$BRIDGE_INSTALL_DIR/start_bridge.sh${NC}"
    echo ""
    echo "Service control:"
    echo "  ${YELLOW}$BRIDGE_INSTALL_DIR/bridge_control.sh start|stop|restart${NC}"
    echo ""
    echo "Check status:"
    echo "  ${YELLOW}$BRIDGE_INSTALL_DIR/bridge_status.sh${NC}"
    echo ""
    echo "Configuration files:"
    echo "  Bridge config: ${YELLOW}$BRIDGE_INSTALL_DIR/tft_bridge_config.sh${NC}"
    echo "  Service file:  ${YELLOW}/etc/systemd/system/${SERVICE_NAME}.service${NC}"
    echo "  Klipper macros: ${YELLOW}$KLIPPER_CONFIG_DIR/klipper_tft_macros.cfg${NC}"
    echo ""
    echo -e "${GREEN}Your TFT35 V2 should now work with Klipper!${NC}"
    echo ""
}

# Main execution
main() {
    print_header
    
    # Load or create configuration
    if ! load_configuration; then
        if ! create_config_from_template; then
            interactive_configuration
            save_configuration
        else
            print_info "Please edit $CONFIG_FILE and run this script again."
            exit 0
        fi
    fi
    
    display_configuration_summary
    check_prerequisites
    pause_for_user
    
    install_dependencies
    install_bridge_files
    create_systemd_service
    create_helper_scripts
    test_installation
    
    print_final_instructions
}

# Check if running in correct directory
if [[ ! -f "$SCRIPT_DIR/tft_moonraker_bridge.py" ]]; then
    print_error "Required files not found in current directory!"
    print_info "Please run this script from the tftKlipperBridge directory containing:"
    echo "  - tft_moonraker_bridge.py"
    echo "  - klipper_tft_macros.cfg"
    echo "  - tft_bridge_config.template"
    echo ""
    print_info "If you're in the main repository directory, run:"
    echo "  ${YELLOW}cd tftKlipperBridge${NC}"
    echo "  ${YELLOW}./install_tft_bridge.sh${NC}"
    exit 1
fi

# Run main function
main "$@"